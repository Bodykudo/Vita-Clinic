generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  doctor
  patient
}

enum Sex {
  male
  female
}

enum BloodType {
  a_positive
  a_negative
  b_positive
  b_negative
  ab_positive
  ab_negative
  o_positive
  o_negative
}

enum SmokingStatus {
  never
  former
  current
}

enum AlcoholStatus {
  never
  former
  current
}

enum DrugsUsage {
  never
  former
  current
}

enum DosageForm {
  tablet
  capsule
  syrup
  injection
  ointment
  cream
  lotion
  inhaler
  drops
  suppository
  patch
  gel
  spray
  solution
  powder
  suspension
}

enum RouteOfAdministration {
  oral
  sublingual
  buccal
  rectal
  vaginal
  intravenous
  intramuscular
  subcutaneous
  intradermal
  transdermal
  intrathecal
  intraarticular
  intranasal
  inhalation
  ocular
  otic
  topically
  epidural
  intracardiac
}

enum Frequency {
  daily
  weekly
  monthly
  yearly
}

enum DeviceStatus {
  active
  inactive
}

enum AppointmentStatus {
  pending
  rejected
  approved
  cancelled
  completed
}

enum BillingStatus {
  initial
  cancelled
  paid
  insurance
}

enum OtpType {
  email
  phone
  reset
}

model Otp {
  id  String @id @default(uuid())
  otp String @unique

  type       OtpType
  expiryDate DateTime

  User   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  role      Role    @default(patient)
  firstName String
  lastName  String
  avatarURL String?
  password  String

  isSuperAdmin Boolean @default(false)
  isActive     Boolean @default(true)

  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)
  otp             Otp[]

  birthDate   DateTime
  sex         Sex
  phoneNumber String?  @unique
  address     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  speciality   Speciality? @relation(fields: [specialityId], references: [id])
  specialityId String?

  emr      ElectronicMedicalRecord?
  messages Message[]

  doctorAppointments  Appointment[] @relation("doctorAppointments")
  patientAppointments Appointment[] @relation("patientAppointments")

  actions Action[]
}

model ElectronicMedicalRecord {
  id        String @id @default(uuid())
  patient   User   @relation(fields: [patientId], references: [id])
  patientId String @unique

  height        Float?
  weight        Float?
  bloodType     BloodType?
  smokingStatus SmokingStatus?
  alcoholStatus AlcoholStatus?
  drugsUsage    DrugsUsage?
  insurance     Insurance?

  diagnoses         PatientDiagnosis[]
  surgeries         PatientSurgery[]
  medicalConditions PatientMedicalCondition[]
  allergies         PatientAllergy[]
  medications       PatientMedication[]
  appointments      Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Diagnosis {
  id          String  @id @default(uuid())
  name        String
  description String?

  patientDiagnosis PatientDiagnosis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientDiagnosis {
  id          String    @id @default(uuid())
  diagnosis   Diagnosis @relation(fields: [diagnosisId], references: [id])
  diagnosisId String

  notes String?
  date  DateTime

  emr   ElectronicMedicalRecord @relation(fields: [emrId], references: [id])
  emrId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Surgery {
  id          String  @id @default(uuid())
  name        String
  description String?

  patientSurgery PatientSurgery[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientSurgery {
  id        String  @id @default(uuid())
  surgery   Surgery @relation(fields: [surgeryId], references: [id])
  surgeryId String

  notes String?
  date  DateTime

  emr   ElectronicMedicalRecord @relation(fields: [emrId], references: [id])
  emrId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalCondition {
  id          String  @id @default(uuid())
  name        String
  description String?

  patientMedicalCondition PatientMedicalCondition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientMedicalCondition {
  id                 String           @id @default(uuid())
  medicalCondition   MedicalCondition @relation(fields: [medicalConditionId], references: [id])
  medicalConditionId String

  notes String?
  date  DateTime

  emr   ElectronicMedicalRecord @relation(fields: [emrId], references: [id])
  emrId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Allergy {
  id          String  @id @default(uuid())
  name        String
  description String?

  patientAllergy PatientAllergy[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientAllergy {
  id        String  @id @default(uuid())
  allergy   Allergy @relation(fields: [allergyId], references: [id])
  allergyId String

  notes           String?
  patientReaction String?

  emr   ElectronicMedicalRecord @relation(fields: [emrId], references: [id])
  emrId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id          String  @id @default(uuid())
  name        String
  description String?

  dosageForm            DosageForm
  strength              Float
  unit                  String
  routeOfAdministration RouteOfAdministration

  patientMedication PatientMedication[]
  prescriptions     Prescription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientMedication {
  id           String     @id @default(uuid())
  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String

  notes     String?
  dosage    Float?
  frequency Frequency?
  required  Boolean    @default(true)
  startDate DateTime?
  endDate   DateTime?

  emr   ElectronicMedicalRecord @relation(fields: [emrId], references: [id])
  emrId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Insurance {
  id           String @id @default(uuid())
  provider     String
  policyNumber String

  policyStartDate DateTime
  policyEndDate   DateTime

  emr   ElectronicMedicalRecord @relation(fields: [emrId], references: [id])
  emrId String                  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id     String   @id @default(uuid())
  number Int      @unique @default(autoincrement())
  date   DateTime

  doctor   User?   @relation("doctorAppointments", fields: [doctorId], references: [id])
  doctorId String?

  patient   User   @relation("patientAppointments", fields: [patientId], references: [id])
  patientId String

  emr   ElectronicMedicalRecord? @relation(fields: [emrId], references: [id])
  emrId String?

  status                AppointmentStatus
  services              AppointmentServices @relation(fields: [appointmentServicesId], references: [id])
  appointmentServicesId String              @unique
  billing               Billing             @relation(fields: [billingId], references: [id])
  billingId             String              @unique
  vitals                Vitals              @relation(fields: [vitalsId], references: [id])
  vitalsId              String              @unique

  prescriptions         Prescription[]
  reports               Report[]
  scans                 Scan[]
  laboratoryTestResults LaboratoryTestResult[]
  treatments            Treatment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppointmentServices {
  id String @id @default(uuid())

  service   Service?         @relation(fields: [serviceId], references: [id])
  serviceId String?
  therapy   Therapy?         @relation(fields: [therapyId], references: [id])
  therapyId String?
  scans     Modality[]
  labWorks  LaboratoryTest[]
  notes     String?

  appointment Appointment?
}

model Vitals {
  id                     String  @id @default(uuid())
  temperature            Float?
  bloodPressure          String?
  systolicBloodPressure  Int?
  diastolicBloodPressure Int?
  heartRate              Int?
  respiratoryRate        Int?
  oxygenSaturation       Int?

  appointment Appointment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prescription {
  id           String     @id @default(uuid())
  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String

  notes     String?
  dosage    Float?
  frequency Frequency?
  required  Boolean    @default(true)
  startDate DateTime?
  endDate   DateTime?

  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportStatus {
  initial
  processed
  failed
}

model Report {
  id        String       @id @default(uuid())
  title     String
  notes     String?
  reportURL String
  fileName  String
  status    ReportStatus @default(initial)

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id            String  @id @default(uuid())
  isUserMessage Boolean
  message       String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Modality {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float

  scan Scan[]

  appointmentServices AppointmentServices[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Scan {
  id    String  @id @default(uuid())
  title String
  notes String?

  modality   Modality @relation(fields: [modalityId], references: [id])
  modalityId String

  scanURLs String[]

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billing {
  id     String        @id @default(uuid())
  number Int           @unique @default(autoincrement())
  date   DateTime
  amount Float
  status BillingStatus @default(initial)

  appointment Appointment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Biomarker {
  id          String  @id @default(uuid())
  name        String
  description String?

  minimumValue Float
  maximumValue Float
  unit         String

  laboratoryTest LaboratoryTest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LaboratoryTest {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float

  biomarkers           Biomarker[]
  laboratoryTestResult LaboratoryTestResult[]
  appointmentServices  AppointmentServices[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LaboratoryTestResult {
  id     String   @id @default(uuid())
  result String
  date   DateTime

  laboratoryTest   LaboratoryTest @relation(fields: [laboratoryTestId], references: [id])
  laboratoryTestId String

  results Float[]

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id                  String                @id @default(uuid())
  name                String
  description         String?
  price               Float
  appointmentServices AppointmentServices[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Therapy {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float
  unit        String?

  appointmentServices AppointmentServices[]
  treatments          Treatment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Treatment {
  id   String @id @default(uuid())
  name String

  therapy       Therapy     @relation(fields: [therapyId], references: [id])
  therapyId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String

  dosage     Float
  duration   Int
  response   String?
  sideEffect String?
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id          String  @id @default(uuid())
  name        String
  description String?

  status       DeviceStatus @default(active)
  imageURL     String?
  serialNumber String       @unique
  price        Float

  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId String

  purchaseDate DateTime
  maintenances Maintenance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manufacturer {
  id          String  @id @default(uuid())
  name        String
  description String?

  devices Device[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Maintenance {
  id          String   @id @default(uuid())
  description String
  date        DateTime

  device   Device @relation(fields: [deviceId], references: [id])
  deviceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Speciality {
  id          String  @id @default(uuid())
  name        String
  description String?

  doctors User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Action {
  id         String  @id @default(uuid())
  user       User    @relation(fields: [userId], references: [id])
  targetId   String
  targetName String
  type       String
  action     String
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}
